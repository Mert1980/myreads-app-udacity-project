{"version":3,"sources":["BooksAPI.js","components/Book.js","components/Search.js","components/BookShelf.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","bookId","fetch","concat","then","res","json","data","book","getAll","books","update","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","Book","state","getShelf","_callee","currentBook","regenerator_default","a","wrap","_context","prev","next","_this","props","sent","setState","stop","this","handleSelectShelf","_callee2","event","_context2","target","value","getAllBooks","t0","Error","message","react_default","createElement","className","style","width","height","backgroundImage","image","onChange","disabled","title","authors","map","author","key","Component","Search","searchQuery","debounce","cb","result","updateQuery","length","trim","response","error","_this2","react_router_dom","to","type","placeholder","components_Book","imageLinks","thumbnail","React","BookShelf","BooksApp","booksOnMainPage","react_router","exact","path","components_BookShelf","filter","render","components_Search","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.6d687810.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token;\nif (!token)\n  token = localStorage.token = Math.random()\n    .toString(36)\n    .substr(-8);\n\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json());\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ query }),\n  })\n    .then((res) => res.json())\n    .then((data) => data.books);\n","import React, { Component } from \"react\";\nimport { update, get } from \"../BooksAPI\";\n\n/**\n * Component that renders queried books and also handles the changes in shelf\n *\n * @component\n */\nclass Book extends Component {\n  state = {\n    shelf: \"\",\n  };\n\n  componentDidMount() {\n    this.getShelf();\n  }\n\n/**\n   * Fetches the current book from API and updates the \n   * state of the shelf accordingly. This function only \n   * handles the books that is fetched in the main page. \n   * For the rest of the books coming from search function, it \n   * sets none as a default shelf state\n   *\n   * @function getShelf\n   */\n  getShelf = async () => {\n    const currentBook = await get(this.props.book.id);\n    if (currentBook.shelf) {\n      this.setState({ shelf: currentBook.shelf });\n    } else {\n      this.setState({ shelf: \"none\" });\n    }\n  };\n\n  /**\n   * Updates the shelf of the book depending on the selection of the user\n   * in dropdown select menu\n   *\n   * @function handleSelectShelf\n   *\n   * @returns all books from API\n   */\n  handleSelectShelf = async (event) => {\n    this.setState({ shelf: event.target.value });\n    try {\n      await update(this.props.book, event.target.value);\n      await this.props.getAllBooks();\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"book\">\n        <div className=\"book-top\">\n          <div\n            className=\"book-cover\"\n            style={{\n              width: 128,\n              height: 193,\n              backgroundImage: `url(${this.props.image})`,\n            }}\n          />\n          <div className=\"book-shelf-changer\">\n            <select value={this.state.shelf} onChange={this.handleSelectShelf}>\n              <option value=\"move\" disabled>\n                Move to...\n              </option>\n              <option value=\"currentlyReading\">Currently Reading</option>\n              <option value=\"wantToRead\">Want to Read</option>\n              <option value=\"read\">Read</option>\n              <option value=\"none\">None</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"book-title\">{this.props.title}</div>\n        {this.props.authors &&\n          this.props.authors.map((author, id) => {\n            return (\n              <div key={id} className=\"book-authors\">\n                {author}\n              </div>\n            );\n          })}\n      </div>\n    );\n  }\n}\n\nexport default Book;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { search } from \"../BooksAPI\";\nimport Book from \"./Book\";\nimport { debounce } from \"debounce\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Component that renders books when user queries in the search box\n *\n * @component\n */\nclass Search extends React.Component {\n  state = {\n    query: \"\",\n    books: [],\n  };\n\n  /**\n   * Debounce takes a function as a parameter and delays the execution\n   * of it for a predefined time. Since setState works asynchronously,\n   * we delay the searchQuery function for 2ms until the state of the query\n   * is changed by the state.\n   *\n   * @function searchQuery\n   *\n   * @param {function} callback function - searchQuery function to fetch books iaw query\n   *\n   */\n  searchQuery = debounce(function(query, cb) {\n    search(query).then((result) => cb(result));\n  }, 300);\n\n  /**\n   * Update the state of the query in accordance with the user input\n   * Search books in API by typing in search field\n   *\n   * @function updateQuery\n   *\n   * @param input event\n   *\n   * @returns new state of books\n   */\n  updateQuery = (event) => {\n    const query = event.target.value;\n    this.setState({ query });\n\n    if (query.length === 0) {\n      this.setState({ books: [] });\n    } else if (query.trim()) {\n      this.searchQuery(query.trim(), (response) => {\n        if (response.error) {\n          this.setState({ books: [] });\n        } else {\n          this.setState({ books: response });\n        }\n      });\n    }\n  };\n\n  render() {\n    const { query } = this.state;\n\n    return (\n      <div>\n        <div className=\"search-books\">\n          <div className=\"search-books-bar\">\n            <Link to=\"/\">\n              <button className=\"close-search\">Close</button>\n            </Link>\n            <div className=\"search-books-input-wrapper\">\n              <input\n                type=\"text\"\n                placeholder=\"Search by title or author\"\n                value={query}\n                onChange={this.updateQuery}\n              />\n            </div>\n          </div>\n          <div className=\"search-books-results\">\n            <ol className=\"books-grid\">\n              {this.state.books.length > 0 &&\n                this.state.books.map((book) => {\n                  return (\n                    <li key={book.id}>\n                      <Book\n                        book={book}\n                        title={book.title}\n                        authors={book.authors}\n                        image={book.imageLinks ? book.imageLinks.thumbnail : \"\"}\n                        getAllBooks={this.props.getAllBooks}\n                      />\n                    </li>\n                  );\n                })}\n            </ol>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nSearch.propTypes = {\n  /**\n   * book object\n   */\n  book: PropTypes.object,\n  /**\n   * Book's title\n   */\n  title: PropTypes.string,\n  /**\n   * Book's authors\n   */\n  authors: PropTypes.array,\n  /**\n   * Book's cover image link\n   */\n  image: PropTypes.string,\n  /**\n   * Function to fetch all books from API\n   */\n  getAllBooks: PropTypes.func,\n};\n\nexport default Search;\n","import React from \"react\";\nimport Book from \"./Book\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Component that renders books in accordance with their shelves\n *\n * @component\n */\nfunction BookShelf(props) {\n  return (\n    <div>\n      <div className=\"bookshelf\">\n        <h2 className=\"bookshelf-title\">{props.shelf}</h2>\n        <div className=\"bookshelf-books\">\n          <ol className=\"books-grid\">\n            {props.books.length > 0 &&\n              props.books.map((book) => {\n                return (\n                  <li key={book.id}>\n                    <Book\n                      shelf={props.shelf}\n                      getAllBooks={props.getAllBooks}\n                      book={book}\n                      title={book.title}\n                      authors={book.authors}\n                      image={book.imageLinks ? book.imageLinks.thumbnail : \"\"}\n                    />\n                  </li>\n                );\n              })}\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nBookShelf.propTypes = {\n  /**\n   * book object\n   */\n  book: PropTypes.object,\n  /**\n   * Book's title\n   */\n  title: PropTypes.string,\n  /**\n   * Book's authors\n   */\n  authors: PropTypes.array,\n  /**\n   * Book's cover image link\n   */\n  image: PropTypes.string,\n  /**\n   * Function to fetch all books from API\n   */\n  getAllBooks: PropTypes.func,\n};\n\nexport default BookShelf;\n","import React from \"react\";\nimport Search from \"./components/Search\";\nimport PropTypes from \"prop-types\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport { getAll } from \"./BooksAPI\";\nimport BookShelf from \"./components/BookShelf\";\n\n/**\n * Component that renders bookshelves and links to search page\n *\n * @component\n */\nclass BooksApp extends React.Component {\n  state = {\n    books: [],\n  };\n\n  componentDidMount() {\n    this.getAllBooks();\n  }\n\n  /**\n   * fetch all books from API\n   *\n   * @async\n   * @function getAllBooks\n   * @returns {Array} Array of objects\n   */\n  getAllBooks = () => {\n    getAll().then((books) => {\n      this.setState({ books });\n    });\n\n  };\n\n  render() {\n    const booksOnMainPage = this.state.books\n    const App = () => {\n      return (\n        <div className=\"list-books\">\n          <div className=\"list-books-title\">\n            <h1>MyReads</h1>\n          </div>\n          <div className=\"list-books-content\">\n            <BookShelf\n              getAllBooks={this.getAllBooks}\n              shelf={\"Currently Reading\"}\n              books={this.state.books.filter(\n                (book) => book.shelf === \"currentlyReading\"\n              )}\n            />\n            <BookShelf\n              getAllBooks={this.getAllBooks}\n              shelf={\"Want To Read\"}\n              books={this.state.books.filter(\n                (book) => book.shelf === \"wantToRead\"\n              )}\n            />\n            <BookShelf\n              getAllBooks={this.getAllBooks}\n              shelf={\"Read\"}\n              books={this.state.books.filter((book) => book.shelf === \"read\")}\n            />\n          </div>\n          <div className=\"open-search\">\n            <Link to=\"/search\">\n              <button>Add a book</button>\n            </Link>\n          </div>\n        </div>\n      );\n    };\n    return (\n      <Router>\n        <Route exact path=\"/\">\n          <App />\n        </Route>\n        <Route\n          path=\"/search\"\n          render={() => (\n            <Search booksOnMainPage={booksOnMainPage} getAllBooks={this.getAllBooks} />\n          )}\n        />\n      </Router>\n    );\n  }\n}\n\nBooksApp.propTypes = {\n  /**\n   * API endpoint to fetch books\n   */\n  getAllBooks: PropTypes.func,\n  /**\n   * Shelf's name\n   */\n  shelf: PropTypes.string,\n  /**\n   * Array of book objects\n   */\n  books: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default BooksApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}